{
    "ecmaFeatures": {},
    "parser": "espree",
    "env": {
        "browser": false,
        "node": true,
        "amd": false,
        "mocha": true,
        "jasmine": false
    },

    "rules": {
        //disallow the use of alert, confirm, and prompt
        "no-alert": 2,
        //disallow use of the Array constructor
        "no-array-constructor": 2,
        //disallow use of bitwise operators (&, |, ^, etc.)
        "no-bitwise": 0,
        //disallow use of arguments.caller or arguments.callee
        "no-caller": 2,
        //disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-catch-shadow": 2,
        //disallow trailing commas in object literals
        "comma-dangle": 2,
        //disallow assignment in conditional expressions
        "no-cond-assign": 2,
        //disallow use of console
        "no-console": 1,
        //disallow use of constant expressions in conditions
        "no-constant-condition": 1,
        //disallow use of the continue statement
        "no-continue": 0,
        //disallow control characters in regular expressions
        "no-control-regex": 2,
        //disallow use of debugger
        "no-debugger": 2,
        //disallow deletion of variables. Deletion of properties still allowed
        "no-delete-var": 2,
        //disallow division operators explicitly at beginning of regular expression
        "no-div-regex": 1,
        //disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,
        //disallow duplicate arguments in functions
        "no-dupe-args": 2,
        //disallow a duplicate case label
        "no-duplicate-case": 2,
        //disallow else after a return in an if
        "no-else-return": 1,
        //disallow empty statements, e.g. if(a===3) { }
        "no-empty": 1,
        //disallow the use of empty character classes in regular expressions
        "no-empty-character-class": 2,
        //disallow use of labels for anything other than loops and switches
        "no-empty-label": 2,
        //disallow comparisons to null without a type-checking operator
        "no-eq-null": 2,
        //disallow use of eval()
        "no-eval": 2,
        //disallow assigning to the exception in a catch block
        "no-ex-assign": 2,
        //disallow adding to native types
        "no-extend-native": 2,
        //disallow unnecessary function binding
        "no-extra-bind": 2,
        //disallow double-negation boolean casts in a boolean context, e.g. if(!!foo) instead of if(foo)
        "no-extra-boolean-cast": 2,
        //disallow unnecessary parentheses
        "no-extra-parens": 0,
        //disallow unnecessary semicolons
        "no-extra-semi": 2,
        //disallow fallthrough of case statements
        "no-fallthrough": 2,
        //disallow the use of leading or trailing decimal points in numeric literals, e.g. .2, -.3 or 2. not allowed
        "no-floating-decimal": 2,
        //disallow overwriting functions written as function declarations
        "no-func-assign": 2,
        //disallow use of eval()-like methods
        "no-implied-eval": 2,
        //disallow comments inline after code
        "no-inline-comments": 0,
        //disallow function or variable declarations in nested blocks
        "no-inner-declarations": [2, "functions"],
        //disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,
        //disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,
        //disallow usage of __iterator__ property
        "no-iterator": 2,
        //disallow labels that share a name with a variable
        "no-label-var": 2,
        //disallow use of labeled statements
        "no-labels": 1,
        //disallow unnecessary nested blocks
        "no-lone-blocks": 2,
        //disallow if as the only statement in an else block
        "no-lonely-if": 0,
        //disallow creation of functions within loops
        "no-loop-func": 2,
        //disallow mixing regular variable and require declarations
        "no-mixed-requires": [0, false],
        //disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": [2, false],
        //disallow mixed 'LF' and 'CRLF' as linebreaks
        "linebreak-style": [0, "unix"],
        //disallow use of multiple spaces
        "no-multi-spaces": 2,
        //disallow use of multiline strings
        "no-multi-str": 2,
        //disallow multiple empty lines
        "no-multiple-empty-lines": [2, {"max": 2}],
        //disallow reassignments of native objects, e.g. String = "hello world";
        //var String;
        "no-native-reassign": 2,
        //disallow negation of the left operand of an in expression, e.g. instead of 'if(!(a in b))' user writes 'if(!a in b)'
        "no-negated-in-lhs": 2,
        //disallow nested ternary expressions
        "no-nested-ternary": 1,
        //disallow use of new operator when not part of the assignment or comparison
        "no-new": 2,
        //disallow use of new operator for Function object
        "no-new-func": 2,
        //disallow use of the Object constructor, e.g. disallow using var myObj = new Object(). Allows var myObj = {}
        "no-new-object": 2,
        //disallow use of new operator with the require function
        "no-new-require": 2,
        //disallows creating new instances of String,Number, and Boolean
        "no-new-wrappers": 2,
        //disallow the use of object properties of the global object (Math and JSON) as functions, e.g. var x = new Math() not allowed
        "no-obj-calls": 2,
        //disallow use of octal literals, e.g. var num = 071 or var num = 5 + 07 not allowed. var num = "071" allowed
        "no-octal": 2,
        //disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251"
        "no-octal-escape": 2,
        //disallow reassignment of function parameters
        "no-param-reassign": 0,
        //disallow string concatenation with __dirname and __filename. Use path module instead.
        "no-path-concat": 2,
        //disallow use of unary operators, ++ and --
        "no-plusplus": 0,
        //disallow use of unary operators, ++ and --
        "no-process-env": 0,
        //disallow process.exit()
        "no-process-exit": 2,
        //disallow usage of __proto__ property. use getPrototypeOf method instead
        "no-proto": 2,
        //disallow declaring the same variable more than once
        "no-redeclare": 2,
        //disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 2,
        //disallow reserved words being used as object literal keys
        "quote-props": [2, "as-needed"],
        //restrict usage of specified node modules
        "no-restricted-modules": 0,
        //disallow use of assignment in return statement,e.g. return num = num1 + num2 not allowed
        "no-return-assign": 2,
        //disallow use of javascript: urls.
        "no-script-url": 1,
        //disallow comparisons where both sides are exactly the same, e.g. var x = 10; if(x==x){} not allowed
        "no-self-compare": 2,
        //disallow use of comma operator
        "no-sequences": 1,
        //disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,
        //disallow shadowing of names such as arguments,e.g. function NaN(){}, var undefined not allowed
        "no-shadow-restricted-names": 2,
        // disallow space before semicolon
        "semi-spacing": 2,
        //disallow space between function identifier and application
        "no-spaced-func": 2,
        //disallow sparse arrays, e.g. var items = [,,] or var colors = [ "red",, "blue" ] not allowed
        "no-sparse-arrays": 2,
        //disallow use of synchronous methods
        "no-sync": 1,
        //disallow the use of ternary operators
        "no-ternary": 0,
        //disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 1,
        //restrict what can be thrown as an exception
        "no-throw-literal": 0,
        //disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,
        //disallow use of undefined when initializing variables.A variable that is declared and not initialized to any value automatically gets the value of undefined
        "no-undef-init": 2,
        //disallow use of undefined variable
        "no-undefined": 0,
        //disallow dangling underscores in identifiers
        "no-underscore-dangle": 0,
        //disallow the use of Boolean literals in conditional expressions,e.g. var isYes = answer === 1 ? true : false; not needed
        "no-unneeded-ternary": 2,
        //disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,
        //disallow usage of expressions in statement position
        "no-unused-expressions": 2,
        //disallow declaration of variables that are not used in the code
        "no-unused-vars": [2, {"vars": "all", "args": "after-used"}],
        //disallow use of variables before they are defined
        "no-use-before-define": 2,
        //disallow use of void operator
        "no-void": 0,
        //require let or const instead of var
        "no-var": 0,
        //suggest using of const declaration for variables that are never modified after declared
        "prefer-const": 1,
        //disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
        "no-warning-comments": [0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
        //disallow use of the with statement
        "no-with": 2,

        //Enforces getter/setter pairs in objects
        "accessor-pairs": 0,
        //disallow when variables are used outside of the block in which they were defined
        "block-scoped-var": 2,
        //enforce one true brace style
        "brace-style": [0, "1tbs"],
        //require camel case names
        "camelcase": 0,
        //disallow or enforce trailing commas
        "comma-dangle": [2, "never"],
        //enforce spacing after comma
        "comma-spacing": 2,
        //enforce one true comma style
        "comma-style": 0,
        //specify the maximum cyclomatic complexity allowed in a program
        "complexity": [0, 24],
        //require or disallow padding inside computed properties, e.g. obj[foo ] or obj[ 'foo'] not allowed
        "computed-property-spacing": [1, "never"],
        //require return statements to either always or never specify values
        "consistent-return": 1,
        //enforces consistent naming when capturing the current execution context
        "consistent-this": [0, "that"],
        //specify curly brace conventions for all control statements
        "curly": [2, "all"],
        //require default case in switch statements
        "default-case": 1,
        //enforces consistent newlines before or after dots
        "dot-location": 0,
        //encourages use of dot notation whenever possible,e.g. foo.bar instead of foo['bar']
        "dot-notation": [2, { "allowKeywords": true }],
        //enforce newline at the end of file, with no multiple empty lines
        "eol-last": 1,
        //require the use of === and !==
        "eqeqeq": 2,
        //require function expressions to have a name
        "func-names": 0,
        //enforces use of function declarations or expressions
        "func-style": 0,
        //enforce the spacing around the * in generator functions
        "generator-star-spacing": 0,
        //require or disallow the "use strict" pragma in the global scope
        "strict": [2, "global"],
        //make sure for-in loops have an if statement
        "guard-for-in": 1,
        //enforces error handling in callbacks
        "handle-callback-err": 2,
        //this option sets a specific tab width for your code
        "indent": 2,
        //enforces spacing between keys and values in object literal properties
        "key-spacing": [2, { "beforeColon": false, "afterColon": true }],
        //enforces empty lines around comments
        "lines-around-comment": 0,
        //specify the maximum depth that blocks can be nested
        "max-depth": [0, 4],
        //specify the maximum length of a line in your program
        "max-len": [0, 275, 4],
        //specify the maximum depth callbacks can be nested
        "max-nested-callbacks": [2,3],
        //limits the number of parameters that can be used in the function declaration
        "max-params": [0, 5],
        //specify the maximum number of statement allowed in a function
        "max-statements": [0, 34],
        // require a capital letter for constructors
        "new-cap": 1,
        //disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 2,
        //allow/disallow an empty newline after var statement
        "newline-after-var": 0,
        //require or disallow padding inside curly braces
        "object-curly-spacing": [0, "never"],
        //require method and property shorthand syntax for object literals (ECMAScript 6)
        "object-shorthand": 0,
        //allow or disallow one variable declaration per function
        "one-var": 0,
        //require assignment operator shorthand where possible or prohibit it entirely
        "operator-assignment": [0, "always"],
        //enforce operators to be placed before or after line breaks
        "operator-linebreak": 0,
        //enforce padding within blocks
        "padded-blocks": 0,
        //require quotes around object literal property names
        "quote-props": [2,"as-needed"],
        //specify whether backticks, double or single quotes should be used
        "quotes": [2, "single"],
        //require use of the second argument for parseInt()
        "radix": 0,
        //require or disallow use of semicolons instead of ASI
        "semi": [2,"always"],
        //enforce spacing before and after semicolons
        "semi-spacing": [2, {"before": false, "after": false}],
        //sort variables within the same declaration block
        "sort-vars": 0,
        //require a space after function names
        "space-after-function-name": [0, "never"],
        //require a space after certain keywords
        "space-after-keywords": 0,
        //require or disallow space before blocks
        "space-before-blocks": [2,"always"],
        //require or disallow space before function opening parenthesis
        "space-before-function-paren": [0, "never"],
        //require or disallow spaces inside parentheses
        "space-in-parens": [2, "never"],
        //require spaces around operators
        "space-infix-ops": 0,
        //require a space after return, throw, and case
        "space-return-throw-case": 2,
        //Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "space-unary-ops": [2, { "words": true, "nonwords": false }],
        //require or disallow a space immediately following the // or /* in a comment
        "spaced-comment": 0,
        //disallow comparisons with the value NaN. e.g. use 'if(isNaN(foo))' instead of 'if(foo===NaN)'
        "use-isnan": 2,
        //Ensure JSDoc comments are valid
        "valid-jsdoc": 0,
        //Ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,
        //requires to declare all vars on top of their containing scope
        "vars-on-top": 0,
        //require immediate function invocation to be wrapped in parentheses
        "wrap-iife": 0,
        //require regex literals to be wrapped in parentheses
        "wrap-regex": 0,
        //require or disallow Yoda conditions
        "yoda": [2, "never"]
    }
}
